// RAM64
CHIP RAM64 
{
IN in[16], load, address[6];
OUT out[16];

PARTS:
DMux8Way(in=load,sel=address[3..5],a=s1,b=s2,c=s3,d=s4,e=s5,f=s6,g=s7,h=s8);
RAM8(in=in,load=s1,address=address[0..2],out=k1);
RAM8(in=in,load=s2,address=address[0..2],out=k2);
RAM8(in=in,load=s3,address=address[0..2],out=k3);
RAM8(in=in,load=s4,address=address[0..2],out=k4);
RAM8(in=in,load=s5,address=address[0..2],out=k5);
RAM8(in=in,load=s6,address=address[0..2],out=k6);
RAM8(in=in,load=s7,address=address[0..2],out=k7);
RAM8(in=in,load=s8,address=address[0..2],out=k8);
Mux8Way16(a=k1,b=k2,c=k3,d=k4,e=k5,f=k6,g=k7,h=k8,sel=address[3..5],out=out);
}

// Notes:


/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */